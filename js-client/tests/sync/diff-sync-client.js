(function() {

    module( 'Diff Sync integration test' );


    asyncTest( 'patch - simulate a sync update/patch', function () {
        var documentId = uuid();
        var clientId = "client1";
        var addDocument = { msgType: 'add', id: documentId, clientId: clientId, content: 'Do or do not, there is no try.' };
        // the clients diffs would be generated by the client side JS library.
        var clientEdits = { msgType: 'patch',
            id: documentId,
            clientId: clientId,
            version: 0,
            checksum: '',
            diffs: [{operation: 'UNCHANGED', text: 'Do or do not, there is no try'},{operation: 'DELETE', text: '.'},{operation: 'ADD', text: '!'}]};
        var url = 'ws://localhost:7777/sync';
        var ws = new WebSocket(url);
        var ws2 = new WebSocket(url);

        ws2.onopen = function( evt ) {
            addDocument.clientId = "client2";
            ws2.send( JSON.stringify ( addDocument ) );
        }

        ws.onopen = function( evt ) {
            ws.send( JSON.stringify ( addDocument ) );
        };

        var counter1 = 0;
        ws.onmessage = function( evt ) {
            var json = JSON.parse( evt.data );
            switch ( counter1 ) {
                case 0:
                    equal( json.result, 'ADDED', 'Document should have been added' );
                    break;
                case 1:
                    equal( json.result, 'PATCHED', 'The patch should have been applied' );
                    break;
                    start();
            }
            counter1++;
        };

        var counter2 = 0;
        ws2.onmessage = function( evt ) {
            var json = JSON.parse( evt.data );
            switch ( counter2 ) {
                case 0:
                    equal( json.result, 'ADDED', 'Document should have been added' );
                    ws.send( JSON.stringify ( clientEdits ) );
                    break;
                    start();
                case 1:
                    equal( json.msgType, 'patch', 'The server should have generated an edit' );
                    equal( json.clientId, clientId, 'The clientId should match. This is who made the update.' );
                    equal( json.version, 1, 'Version of the server document recieved.' );
                    equal( json.diffs[0].operation, 'UNCHANGED', 'Since we made the change now change is required.' );
                    equal( json.diffs[0].text, 'Do or do not, there is no try', 'The first part of the string should be unchanged.' );
                    equal( json.diffs[1].operation, 'DELETE', 'The operation should be DELETE' );
                    equal( json.diffs[1].text, '.', "text should be '.'" );
                    equal( json.diffs[2].operation, 'ADD', 'The operation should be ADD' );
                    equal( json.diffs[2].text, '!', "text should be '!'" );
                    start();
                    break;
            }
            counter2++
        };

        ws.onerror = function( e ) {
            ok( false, 'WS client1 failed to connect to WebSocket server [' + url + ']' );
            start();
        };

        ws2.onerror = function( e ) {
            ok( false, 'WS client2 failed to connect to WebSocket server [' + url + ']' );
            start();
        };
    });

    test( 'Sync.Client should support creation without the new keyword', function() {
        var client = Sync.Client( { serverUrl: 'ws://localhost:7777/sync' } );
        ok( client , 'Should be no problem not using new when creating' );
    });

    test( 'serverUrl is mandatory', function() {
        throws( function() { Sync.Client(); } , Error, "'serverUrl' must be specified" );
    });

    test( 'member access', function() {
        var client = Sync.Client( { serverUrl: 'ws://localhost:7777/sync' } );
        equal( client.serverUrl, undefined, 'Should not be able to access private members serverUrl' );
        equal( client.sendQueue, undefined, 'Should not be able to access private members sendQueue' );
        equal( client.ws, undefined, 'Should not be able to access private members ws' );
    });

    asyncTest('sendDoc to Sync Server', function() {
        var onmessage = function( e ) {
            var json = JSON.parse( e.data );
            equal( json.result, 'ADDED', 'Document should have been added' );
            client.disconnect();
            start();
        };
        var client = Sync.Client( {serverUrl: 'ws://localhost:7777/sync', onmessage: onmessage } );
        var documentId = uuid();
        var doc = { id: documentId, clientId: 'js-client-test', content: 'Do or do not, there is no try.' };
        client.addDoc( doc );
        ok( client , 'Should be no problem not using new when creating' );
    });

    function uuid()
    {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function( c ) {
            var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
            return v.toString( 16 );
        });
    }

})();
